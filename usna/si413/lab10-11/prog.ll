; Generated by SPL Compiler

target triple = "x86_64-pc-linux-gnu"

declare i32 @printf(ptr, ...)

declare i32 @scanf(ptr)

@printLong = constant [4 x i8] c"%d\0A\00"

@scanLong = constant [2 x i8] c"%d"

define i32 @main() {
    ; Num literal 10
    ; New Statment
  %r001 = alloca i64
  store i64 10, ptr %r001
    ; Using variable
  %r002 = load i64, ptr %r001
    ; Num literal 3
    ; Num '+' operation
  %r003 = add i64 %r002, 3
    ; write statement
  call i32 @printf(ptr @printLong, i64 %r003)
    ; Using variable
  %r004 = load i64, ptr %r001
    ; Using variable
  %r005 = load i64, ptr %r001
    ; Num '*' operation
  %r006 = mul i64 %r004, %r005
    ; New Statment
  %r007 = alloca i64
  store i64 %r006, ptr %r007
    ; Using variable
  %r008 = load i64, ptr %r007
    ; write statement
  call i32 @printf(ptr @printLong, i64 %r008)
    ; Using variable
  %r009 = load i64, ptr %r007
    ; Using variable
  %r010 = load i64, ptr %r001
    ; Num '+' operation
  %r011 = add i64 %r009, %r010
    ; write statement
  call i32 @printf(ptr @printLong, i64 %r011)
    ; Num literal 20
    ; New Statment
  %r012 = alloca i64
  store i64 20, ptr %r012
    ; Using variable
  %r013 = load i64, ptr %r012
    ; write statement
  call i32 @printf(ptr @printLong, i64 %r013)
    ; Num literal 3
    ; NegOp
  %r014 = mul i64 3, -1
    ; Assignment Statment
  store i64 %r014, ptr %r012
    ; Using variable
  %r015 = load i64, ptr %r012
    ; write statement
  call i32 @printf(ptr @printLong, i64 %r015)
    ; Using variable
  %r016 = load i64, ptr %r001
    ; write statement
  call i32 @printf(ptr @printLong, i64 %r016)
    ; Num literal 1101
    ; Assignment Statment
  store i64 1101, ptr %r007
    ; Using variable
  %r017 = load i64, ptr %r001
    ; Using variable
  %r018 = load i64, ptr %r007
    ; Num '+' operation
  %r019 = add i64 %r017, %r018
    ; write statement
  call i32 @printf(ptr @printLong, i64 %r019)
  ret i32 0
}
