;;; 1
(define (min-sin x . vals)
  (min-sin-helper vals x))
(define (min-sin-helper L min)
  (if (null? L)
      min
      (if (< (sin (car L)) (sin min))
          (min-sin-helper (cdr L) (car L))
          (min-sin-helper (cdr L) min))))

;;; 2
(define (group k . L)
  (reverse (group-helper k L '())))
(define (group-helper k L R)
  (if (null? L)
      R
      (group-helper k (removeK k L) (cons (firstK k L) R))))
(define (removeK k L)
  (if (or (null? L) (= k 0))
      L
      (removeK (- k 1) (cdr L))))
(define (firstK k L)
  (if (or (null? L) (= k 0))
      '()
      (cons (car L) (firstK (- k 1) (cdr L)))))

;;; 3
(define (base b)
  (lambda (n)
    (digits n b '())))
(define (digits n b R)
  (if (= (quotient n b) 0)
      (cons (remainder n b) R)
      (digits (quotient n b) b (cons (remainder n b) R))))