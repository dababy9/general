; Generated by SPL Compiler

target triple = "x86_64-pc-linux-gnu"

declare i32 @printf(ptr, ...)
declare i32 @scanf(ptr)

@printLong = constant [4 x i8] c"%d\0A\00"
@scanLong = constant [5 x i8] c" %ld\00"


define i32 @main() {
    ; Begin New Statment
  %r001 = alloca i64
  store i64 5, ptr %r001
  %r002 = ptrtoint ptr %r001 to i64
    ; End New Statement
    ; Begin New Statment
  %r003 = ptrtoint ptr @fun1 to i64
  %r004 = alloca i64
  store i64 %r003, ptr %r004
  %r005 = ptrtoint ptr %r004 to i64
    ; End New Statement
  %r007 = inttoptr i64 %r005 to ptr
  %r008 = load i64, ptr %r007
  %r006 = inttoptr i64 %r008 to ptr
  %r009 = call i64 %r006(i64 1)
  %r010 = inttoptr i64 %r002 to ptr
  %r011 = load i64, ptr %r010
    ; write statement
  call i32 @printf(ptr @printLong, i64 %r011)
  ret i32 0
}

define i64 @fun1 (i64 %arg) {
  %r012 = alloca i64
  store i64 %arg, ptr %r012
  %r013 = ptrtoint ptr %r012 to i64
    ; Begin New Statment
  %r014 = alloca i64
  store i64 0, ptr %r014
  %r015 = ptrtoint ptr %r014 to i64
    ; End New Statement
  %r016 = inttoptr i64 %r013 to ptr
  %r017 = load i64, ptr %r016
    ; write statement
  call i32 @printf(ptr @printLong, i64 %r017)
  %r018 = inttoptr i64 %r013 to ptr
  store i64 3, ptr %r018
  %r019 = inttoptr i64 %r013 to ptr
  %r020 = load i64, ptr %r019
    ; write statement
  call i32 @printf(ptr @printLong, i64 %r020)
  %r021 = inttoptr i64 %r015 to ptr
  %r022 = load i64, ptr %r021
  ret i64 %r022
}
